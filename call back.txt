call back 
passing a function as an argument to another function

ordering food and giving your number 

function hello(name,callback){
console.log("hello"+ name);
callback();

}

function back(){
console.log("hi");
}

hello("pranav",back);

types 
1.Synchronous  - after one operation another will done 


function calculator(a,b,oper)
{
return oper(a,b);

}
function add(x,y){
return x+y;}

console.log(calculator(2,3,add))

2. Asynchronous -- parallely we can perform 

console.log("opera start");
setTimeout(()=>{
console.log("Delayed one ")
},2000);

console.log("End");


----call back hell-- pyramid of Doom 

setTimeout(()=>{
console.log("step1");
setTimeout(()=>{
console.log("Step2");
setTimeout(()=>{
console.log("Step3");
},1000);
},1000);

}1000);

instead of using this call back hell you can switch t o promises and async/await 

Promises :

it is object and - give completion of your tas either its any result -- in asynchronous 

3 stages of completion of your task

1. pending
2. failure
3. success


const my= new Promise((resolve,reject)=>{
let success = true;
if(success){
resolve("issue resolved ")}
else{
reject("issue not resolved")
}
});

// then and catch

my.then((mes)=>{
console.log("Success:",mes);
})
.catch((error)=>{
console.log("error",mes)})


//// promise chaining

function S1(){
return new Promise((resolve)=>{

setTimeout(()=>{

console.log("Step1 done ");
resolve("Recieved from s1 and it is complete");

},2000);
});}

function S2(data){
return new Promise((resolve)=>{

setTimeout(()=>{

console.log("Step2 done",data);
resolve("Recieved from s2 adn s2 is complete");

},2000);
});}

S1().then(S2).then((msg)=>{
console.log("Final deal",msg);
});


Conversion of call back hell to promise 


function hi(msg,time){
return new Promise((resolve)=>{
setTimeout(()=>{
console.log(msg);
reolve();
},time);

});
}
hi("s1",1000).then(()=>hi("s2",1000))
.then(()=>hi("s3",1000)); 
///promise chaining but we are converting the callback hell to promise

---- promise.all()
const my =  Promise.resolve("1st operation");

const your =  Promise.resolve("2nd one");

Promise.all([my,your]).then((res)=>{
console.log(res);})


promise.race

const  first = new Promise((resolve)=>setTimeout(resolve,2000,"first operation"));
const second = new Promise((resolve)=>seTimeout(resolve,3000,"second operation"));

Promise.race([first,second]).then((result)=>{

console.log("race completyed ")});



 


